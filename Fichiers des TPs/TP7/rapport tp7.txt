Nouvel IP de la cible :  192.168.7.2

1.1 ) Non, ce n'est pas en temps réel.
Dans le fichier /proc/xenomai/stats il n'apparaît pas ce qui signifie qu'il n'est pas temps réel. (pas sur)

1.2 ) chemin des include : /opt/poky/1.7.3/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/include/xenomai
chemin des libs : /opt/poky/1.7.3/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/lib

Ligne de commande : $CC -o main main.c -I/opt/poky/1.7.3/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/include/xenomai -L/opt/poky/1.7.3/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/lib -lxenomai -lnative

1.3) Non il est toujours pas temps réel car on n'a changé aucune fonction et créé aucune tâche tr

1.4 ) 

PREMIERE PARTIE PAR RAFIK

2.1 ) 

#include <stdio.h>
#include <native/task.h>
#include <analogy/os_facilities.h>
#include <unistd.h>
#include <sys/mman.h>

#define TASK_PRIO 99
#define TASK_MODE 0
#define TASK_STKSZ 0

RT_TASK task_printf;
RT_TASK task_printf2;

void task_hello()
{
	rt_printf("Hello\n");
}

void task_world()
{
	rt_printf("World !\n");
	rt_task_sleep(rt_timer_ns2ticks(1000000000));
}


int main()
{
	/*Question 1.1
	while(1)
	{
		sleep(1);
		printf("Hello World !\n");
	}
	*/


	/*Question 1.2*/
	mlockall(MCL_CURRENT|MCL_FUTURE);
	rt_print_auto_init(1);
	int err1, err2;
	
	err1 = rt_task_create(&task_printf, "hello", TASK_STKSZ, TASK_PRIO, TASK_MODE);
	err2 = rt_task_create(&task_printf2, "world", TASK_STKSZ, TASK_PRIO, TASK_MODE);
	if(!err1 && !err2)
	{
		rt_task_start(&task_printf, &task_hello, NULL);
		rt_task_join(&task_printf);	
		rt_task_start(&task_printf2, &task_world, NULL);
		rt_task_join(&task_printf2);	
	}
		
	getchar();
	
	return 0;
}




RESULTAT :

root@devkit8600-xenomai:~# ./synchro
Hello
World !
c
root@devkit8600-xenomai:~# 


2.2) Les priorités des taches n'ont aucune influence => il faut inverser le code

2.3) 


REP : On initialise le semaphore à 0 pour tout bloquer



2.4) 

S_FIFO  : rt_sem_create (&sem, "sem", 0, S_FIFO);

root@devkit8600-xenomai:~# ./synchro

Hello
World !


S_PRIO : rt_sem_create (&sem, "sem", 0, S_PRIO);

root@devkit8600-xenomai:~# ./synchro

World !
Hello

S_PULSE : rt_sem_create (&sem, "sem", 0, S_PULSE);

root@devkit8600-xenomai:~# ./synchro

Hello
World !



2.5) 

CODE : 

#include <stdio.h>
#include <native/task.h>
#include <analogy/os_facilities.h>
#include <unistd.h>
#include <sys/mman.h>
#include <native/sem.h>

#define TASK_PRIO_HELLO 98
#define TASK_PRIO_WORLD 99
//#define TASK_PRIO 99
#define TASK_MODE 0
#define TASK_STKSZ 0

RT_TASK task_printf;
RT_TASK task_printf2;
RT_SEM sem;

void task_hello()
{
	rt_sem_p (&sem, 0);
	rt_printf("Hello\n");
}

void task_world()
{
	rt_sem_p (&sem, 0);
	rt_printf("World !\n");
}


int main()
{
	/*Question 1.1
	while(1)
	{
		sleep(1);
		printf("Hello World !\n");
	}
	*/


	/*Question 1.2*/
	mlockall(MCL_CURRENT|MCL_FUTURE);
	rt_print_auto_init(1);
	int err1, err2;
	
	rt_sem_create (&sem, "sem", 0, S_FIFO);
	
	err1 = rt_task_create(&task_printf, "hello", TASK_STKSZ, TASK_PRIO_HELLO, TASK_MODE);
	err2 = rt_task_create(&task_printf2, "world", TASK_STKSZ, TASK_PRIO_WORLD, TASK_MODE);
	if(!err1 && !err2)
	{
		rt_task_start(&task_printf, &task_hello, NULL);
		rt_task_join(&task_printf);
		rt_task_start(&task_printf2, &task_world, NULL);
		rt_task_join(&task_printf2);
		
		getchar();
		
		rt_sem_v (&sem);
		rt_sem_v (&sem);
	}
		
	
	return 0;
}

a expliquer par clement



2.6) 

#include <stdio.h>
#include <native/task.h>
#include <analogy/os_facilities.h>
#include <unistd.h>
#include <sys/mman.h>
#include <native/sem.h>

#define TASK_PRIO_HELLO 98
#define TASK_PRIO_WORLD 97
#define TASK_PRIO_METRO 99
//#define TASK_PRIO 99
#define TASK_MODE 0
#define TASK_STKSZ 0

RT_TASK task_printf;
RT_TASK task_printf2;
RT_TASK task_metronome;
RT_SEM sem;

void task_hello()
{
	while(1)
	{
		rt_sem_p (&sem, 0);
		rt_printf("Hello\n");
	}
}

void task_world()
{
	while(1)
	{
		rt_sem_p (&sem, 0);
		rt_printf("World !\n");
		rt_sem_v (&sem);
	}
}

void task_metro()
{
	while(1)
	{
		rt_sem_v (&sem);
		rt_sem_v (&sem);
		
		rt_sem_p (&sem, 0);
		rt_task_sleep(rt_timer_ns2ticks(1000000000));
	}
}


int main()
{
	/*Question 1.1
	while(1)
	{
		sleep(1);
		printf("Hello World !\n");
	}
	*/


	/*Question 1.2*/
	mlockall(MCL_CURRENT|MCL_FUTURE);
	rt_print_auto_init(1);
	int err1, err2, err3;
	
	rt_sem_create (&sem, "sem", 0, S_PRIO);
	
	err1 = rt_task_create(&task_printf, "hello", TASK_STKSZ, TASK_PRIO_HELLO, TASK_MODE);
	err2 = rt_task_create(&task_printf2, "world", TASK_STKSZ, TASK_PRIO_WORLD, TASK_MODE);
	err3= rt_task_create(&task_metronome, "metro", TASK_STKSZ, TASK_PRIO_METRO, TASK_MODE);
	if(!err1 && !err2 && !err3)
	{
		rt_task_start(&task_printf, &task_hello, NULL);
		rt_task_join(&task_printf);
		rt_task_start(&task_printf2, &task_world, NULL);
		rt_task_join(&task_printf2);
		rt_task_start(&task_metronome, &task_metro, NULL);
		rt_task_join(&task_metronome);
		
		getchar();
		
	}
		
	
	return 0;
}



2.7) nombre de changements de contexte très faibles pour nos 3 taches RT ==> stat
     priorités ==> scheduler



3.1)





3.2) TAILLE = 1000 (probleme abérant avec 10 000)
Voir screen


#include <stdio.h>
#include <native/task.h>
#include <analogy/os_facilities.h>
#include <unistd.h>
#include <sys/mman.h>
#include <native/sem.h>
#include <nucleus/timer.h>


#define TASK_PRIO 99
#define TASK_MODE 0
#define TASK_STKSZ 0
#define TAILLE 1000

RT_TASK task_latence;
RTIME tab[TAILLE];

void task_wait()
{
	int i;
	RTIME moy = 0, min, max;
	RTIME begin, end;
	
	for(i = 0; i < TAILLE; i++)
	{
		begin = rt_timer_read();
		rt_task_sleep(rt_timer_ns2ticks(1000000));
		end = rt_timer_read();
		
		tab[i] = end - begin;
		moy += tab[i];
	}
	
	moy = moy / TAILLE;
	min = tab[0];
	max = tab[0];
	

	for(i = 1; i < TAILLE; i++)
	{
		if(min > tab[i])
			min = tab[i];

		if(max < tab[i])
		{
			rt_printf("i : %d, tab : %llu\n", i, tab[i]);
			max = tab[i];
		}
	}
	
	rt_printf("Moyenne :%llu \nMaximum : %llu \nMinimum : %llu\n", moy, max, min);

}


int main()
{
	mlockall(MCL_CURRENT|MCL_FUTURE);
	rt_print_auto_init(1);
	int err1;
	
	err1 = rt_task_create(&task_latence, "wait", TASK_STKSZ, TASK_PRIO, TASK_MODE);

	if(!err1)
	{
		rt_task_start(&task_latence, &task_wait, NULL);
		rt_task_join(&task_latence);
		
		getchar();
	}
		
	
	return 0;
}


3.3) on en conclut qu'avec une tache RT le stress n'a aucune influence car la tache RT a plus grande priorité et 
du coup elle prend le CPU


